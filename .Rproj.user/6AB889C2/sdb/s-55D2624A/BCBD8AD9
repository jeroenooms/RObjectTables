{
    "contents" : "# This defines methods for a class of object table \n# that uses a directory to store its contents.\n# This is similar to the S4/S-Plus style of object\n# storage in which each object is written to \n# its own file. The name of an objects file is \n# the name of the variable.\n# This makes sharing environments almost impossible\n# in a trivial manner. One can use different extensions\n# to this mechanism, e.g. using subdirectories to group\n# objects.\n#\n# This version is implemented entirely in R code\n# rather than using C code.\n# Given that the file and directory access tools\n# are written in C, this should be sufficient for\n# many applications and serves as a good example\n# of the Object Table mechanism.\n\n#\n# One can envisage extending this in a variety of \n# different manners:\n#  a) changing the format of the objects on disk\n#     e.g. using compression, storing as XML representations,\n#     \n#  b) filtering the names of the files,\n#  c) using local caching and time stamps of the files,\n#  d) type specification for variables which checks assignments\n#     are of the specified type.\n#  ...\n#\n\nDirectoryObjectTable <-\n#\n# A constructor function for a Directory object table\n# that takes the name of the directory in which objects\n# should be read and written.\n#\n# The name of the directory is fully expanded.\n#\nfunction(directory, create = TRUE)\n{\n\n d <- list(dir=directory)\n class(d) <- c(\"DirectoryTable\", \"UserDefinedDatabase\")\n\n if(!file.exists(directory)) {\n   if(create) {\n     dir.create(directory)\n     warning(\"Created \", directory)\n   } else\n     warning(directory, \" does not exist\")\n }\n\n if(!file.info(directory)$isdir)\n   stop(paste(directory, \"is not a directory\"))\n \n d\n}\n\ndbobjects.DirectoryTable <-\n#\n# Return a list of the `variables'/files in the \n# directory. This uses \\code{list.files}.\n#\nfunction(database)\n{\n  list.files(database$dir)\n}\n\ndbread.DirectoryTable <-\n#\n# Get/read an object from the table by finding\n# the associated file with the name of the variable\n# and using \\code{load} to read it.\n#\nfunction(database, name, na=1)\n{\n Name <- paste(database$dir,name, sep = .Platform$file.sep)\n if(!file.exists(Name)) {\n    # We don't have it. So return the value \n    # that was given to us to indicate this - `na'.\n    # The internal code checks whether the return\n    # value is this object to identify that the object\n    # was not found. (It would be nicer to use exists()\n    # first.) \n   return(na)\n }\n\n  # We have found the file and now we load its contents\n  # into a fresh, new environment object. \n  # Then we return the contents of that environment \n e <- new.env()\n load(Name, e)\n   \n  # Now look at its contents. We may have more than one \n  # object stored in a single file. For example somebody\n  # may have issued a command such as save(x, y, z, file=\"....\")\n  # If this is the case, return them as a list.\n  # Alternatively, the simple case is that there is a single value.\n  # and we return that value. \n  # It is possible that this does not have the same name as the \n  # file name so we have to find the object by name. \n what <- objects(envir=e)\n if(length(what) == 1) {\n   get(what, envir=e)\n } else {\n   l <- list()\n   i <- function(x) {\n     l[[x]] <<- get(x, envir=e)\n     T\n   }\n   sapply(what, i)\n   l\n }\n}\n\n\ndbwrite.DirectoryTable <-\n#\n# save an object to the directory managed by this table.\n#\nfunction(database, name, object) \n{\n  save(object, file=paste(database$dir, name, sep=.Platform$file.sep))\n}\n\ndbexists.DirectoryTable <-\n#\n# check whether there is a variable in the table\n# by looking for a file in the directory named `name'\n#\nfunction(database, name)\n{\n file.exists(paste(database$dir, name, sep=.Platform$file.sep))\n}\n\ndbremove.DirectoryTable <-\n#\n# remove a variable from the table by removing the\n# associated file.\n#\nfunction(database, name)\n{\n fileName <- paste(database$dir, name, sep=.Platform$file.sep)\n if(!file.exists(fileName))\n  stop(paste(\"No file named\", fileName))\n\n file.remove(fileName)\n}\n\n\n",
    "created" : 1429056296531.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1454090089",
    "id" : "BCBD8AD9",
    "lastKnownWriteTime" : 1429057616,
    "path" : "~/RObjectTables/R/DirectoryTable.S",
    "project_path" : "R/DirectoryTable.S",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}